---
title: "PPHA 30538 Final Project Write Up: Electricity Consumption with Smart Meters in the UK"
author: "Amulya Jasti(amjamz), Sitong Guo(AnthonySigmar), Helen Liu(helenriv)"
date: today
format: 
  html:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---
1. ## CODING PART (Not Counted in Page Limit): 
```{python}
#| echo: false 
#| eval: true
import geopandas as gpd
import pandas as pd
import shapely
from shapely import wkt
from shapely.geometry import Point
import matplotlib.pyplot as plt
import contextily as cx
import altair as alt
import pyarrow
alt.renderers.enable("png")
```

```{python}
#| echo: false 
#| eval: true
#Can use these to change paths easily
aj_path = "C:/Users/amuly/OneDrive/Documents/GitHub/30538-finalproject-smartmeters/"
sg_path = "C:/Users/RedthinkerDantler/Documents/GitHub/DPPP2/30538-finalproject-smartmeters/"
hl_path = "Helen's basepath"
current_path = sg_path
```

Our smart meter data is from weave.energy and our shapefile data is from UK's National Energy System Operator (NESO).

Step 1.1: Import and clean the data
Source: https://github.com/centre-for-ai-and-climate/lv-feeder-smart-meter-data/blob/main/2024-02-12-aggregated-by-substation.csv.gz

```{python} 
#| echo: false 
#| eval: false
#import data aggregated by substation, and only select substations from UKPN
substations = pd.read_csv(r"C:\Users\amuly\Downloads\2024-02-12-aggregated-by-substation.csv\2024-02-12-aggregated-by-substation.csv")
substations_UKPN = substations[substations['substation'].str.startswith('UKPN', na=False)]
```

```{python}
#| echo: false 
#| eval: false
#save as CSV so partners can use it
substations_UKPN.to_csv("C:/Users/amuly/OneDrive/Documents/GitHub/30538-finalproject-smartmeters/data/substations_UKPN.csv", index=False)
```

```{python}
#| echo: false 
#| eval: true
#import data
substations_UKPN = pd.read_csv(current_path+'data/substations_UKPN.csv')

#add new time columns to analyze
substations_UKPN['timestamp'] = pd.to_datetime(substations_UKPN['timestamp'])
substations_UKPN['date'] = substations_UKPN['timestamp'].dt.date
substations_UKPN['day_of_week'] = substations_UKPN['timestamp'].dt.day_name()
substations_UKPN['time_of_day'] = substations_UKPN['timestamp'].dt.time

#set up as a gdf
substations_UKPN['geometry'] = substations_UKPN.apply(lambda row: Point(row['longitude'], row['latitude']), axis=1)
substations_UKPN_gdf = gpd.GeoDataFrame(substations_UKPN, geometry='geometry')
substations_UKPN_gdf = substations_UKPN_gdf.set_crs("EPSG:4326", inplace=True)
```

Filtered to the Bedford/Cambridge region. Source: https://ukpowernetworks.opendatasoft.com/explore/dataset/ukpn-epn-area-operational-boundaries/information/

```{python}
#| echo: false 
#| eval: true
epn_boundaries = gpd.read_file(current_path + "/data/ukpn-epn-area-operational-boundaries/ukpn-epn-area-operational-boundaries.shp")
bedford_cambridge = epn_boundaries[epn_boundaries['ops_area'] == 'Bedford/Cambridge']

# Spatial join to filter to substations from Bedford/Cambridge region
bedford_cambridge_substations = gpd.sjoin(
    substations_UKPN_gdf,  # Substation GeoDataFrame
    bedford_cambridge,     # Bedford/Cambridge region GeoDataFrame
    how='inner',
    predicate='within'
)

# clean substation column
bedford_cambridge_substations['substation'] = bedford_cambridge_substations['substation'].apply(lambda s: s[9:])
```

Added substation boundary data. Source: https://ukpowernetworks.opendatasoft.com/api/explore/v2.1/catalog/datasets/ukpn_secondary_postcode_area/records?limit=20&refine=dno%3A%22EPN%22

```{python}
#| echo: false 
#| eval: true
# Step 1: Load substation boundary data
epn_substation_boundaries = gpd.read_file(current_path + "data/ukpn_secondary_postcode_area/ukpn_secondary_postcode_area.shp").rename(columns={
    "dno": "DNO",
    "sitefunctio": "site_functional_location",
    "demand_head": "demand_headroom",
    "onanrating": "ONAN_rating",
    "source": "source",
    "utilisation": "utilisation_band",
    "predicted_y": "predicted_year_of_reinforcement",
    "customer_co": "customer_count"
})

# Merge on substation column and sitefunctionallocation column
bedford_cambridge_substations = epn_substation_boundaries.merge(
    bedford_cambridge_substations, 
    left_on="site_functional_location", 
    right_on="substation", 
    how="inner", 
    suffixes=('_boundaries', '_substations')  # Suffixes for overlapping column names
)

#reassign geometry
bedford_cambridge_substations_gdf = gpd.GeoDataFrame(bedford_cambridge_substations, geometry='geometry_boundaries')
bedford_cambridge_substations_gdf.rename(columns={'geometry': 'old_geometry'}, inplace=True)
```

```{python}
#| echo: false 
#| eval: false
pd.DataFrame(bedford_cambridge_substations).to_csv(current_path + "data/bedford-cambridge-substations.csv")
'''
Each of the observations in bedford_cambridge_substations_gdf is unique by substation and timestamp (every half hour) combination, with the following columns:
- substation: specific substation of the observation
- consumption: consumption in the past half-hour period
- timestamp: date and half-hour mark, in datetime format
- date: YYYY-MM-DD
- day_of_week: day of week in English (i.e. Monday, Tuesday, ...)
- time_of_day: HH:MM:SS (still in half hour intervals so either HH:00:00 or HH:30:00)
- geometry_boundaries: treated as geometry
'''
```

Step 1.2: Average consumption by substation
```{python}
#| echo: false 
#| eval: false
#Sample code: plot average consumption overall by substation
avg_consumption_by_substation = bedford_cambridge_substations_gdf.groupby('substation')['consumption'].mean().reset_index()

# merge the average consumption with the original GeoDataFrame based on the substation
bedford_cambridge_avg = bedford_cambridge_substations_gdf.merge(avg_consumption_by_substation[['substation', 'consumption']], on='substation', suffixes=('', '_avg'))

# average consumption by substation
ax = bedford_cambridge_avg.plot(
    marker='o', 
    markersize=3, 
    column='consumption_avg',
    cmap='magma', 
    legend=True, 
    legend_kwds={"label": "Average Consumption (kWh) by Substation in Bedford/Cambridge"},
    figsize=(10, 6)
)

cx.add_basemap(
    ax, 
    crs=bedford_cambridge_substations_gdf.crs.to_string(), 
    source=cx.providers.CartoDB.Voyager, 
    attribution=False
)

#plt.show()
```

Step 1.3: A template example for Shiny App
```{python}
#| echo: false 
#| eval: false
# plot all substations' consumptions for 2024-02-12 00:30:00
time = '2024-02-12 00:30:00' #between this and end of 2024-02-29
ax = bedford_cambridge_substations_gdf[bedford_cambridge_substations_gdf['timestamp'] == time].plot(marker='o', markersize=3, column="consumption", cmap='magma', legend="true", legend_kwds={"label": "Total Consumption Active Import (kWh) on 2/12/24 at 12:30AM"}, figsize=(10, 6))
cx.add_basemap(ax, crs=bedford_cambridge_substations_gdf.crs.to_string(), source=cx.providers.CartoDB.Voyager, attribution=False) # adds basemap of UK
# Not used
```

Step 1.4: Graph average by time of day
```{python}
#| echo: false 
#| eval: false
alt.data_transformers.disable_max_rows()
average_consumption = substations_UKPN.groupby('time_of_day')['consumption'].mean().reset_index()
average_consumption['time_of_day'] = pd.to_datetime(average_consumption['time_of_day'], format='%H:%M:%S').dt.strftime('%H:%M:%S')

plot = alt.Chart(average_consumption).mark_line().encode(
    x=alt.X('time_of_day:N', title='Time of Day', axis=alt.Axis(labelAngle=-45, labelOverlap="greedy")),
    y=alt.Y('consumption:Q', title='Average Consumption')
).properties(
        width=900, #adjusted width to fit all labels
        title=f'Average Consumption by Time of Day across all UK Smart Meters'
    )
#plot
```

```{python}
#| echo: false 
#| eval: false
plot.save(current_path + 'pictures/plot1.png')
```

2. ## WRITE UP: 

## Background
The United Kingdom has implemented a national program to replace traditional energy meters with smart meters [1]. These meters offer more accurate information on energy usage and costs to both suppliers and households using them [1]. Consumers who have better transparency on their energy consumption along with live information on their energy spending can more accurately make decisions about how much electricity they would like to consume. This can reveal patterns like the price or income demands of elasticity. Additionally, a wide rollout of smart meters can give us a comparison between the various regions of the UK, revealing trends over space and time.

## Research Questions
Our project aims to...
1. Identify the seasonal, weekly, and daily peaks in energy usage.
2. Sequentially, determine how those peaks can be curbed with peak pricing.

## Approach and Coding
We have limited our research to the UK Power Network (UKPN) Distribution Network Operator (DNO) and its EPN license area of Bedford/Cambridge smart meters because of the greater data availability, diverse demographic variability, and general computing and storage limits. The data available is for the month of February 2024.

## Weaknesses and Difficulties
Some major weaknesses were in lack of data, especially as shown in the geo plots where there are gaps in substations. These are missing either because the EPN does not have smartmeters there or the population is too small to share the data for privacy reasons.

We addressed this by focusing on urban areas, where there is more data (although incomplete) and more consumers.

## Plots
Plot 1 shows the trends in consumption by time of day. The largest peak is in the evening.
![](pictures/plot1.png){ width=60% fig-align="center"}


Plot 2 shows a sample of our Shiny dashboard, which allows one to visualize consumption by time of day in the Bedford/Cambridge region.
![](pictures/plot2.jpg){ width=60% fig-align="center"}


Plot 3 shows average consumption by substation overall, indicating where might be the locations primarily affected by peak pricing.
![](pictures/plot3.png){ width=60% fig-align="center"}

## Policy Implications
To manage peak electricity demand effectively, we recommend implementing a higher pricing rate during peak consumption hours, specifically from 5:00 pm to 9:00 pm. The current pricing is set at 24.50p per kWh (Source 2), while a recommended peak pricing rate of 30p per kWh (a 22.45% increase) could help mitigate excessive demand. This adjustment is expected to reduce demand during these peak periods by approximately 13.63%. Considering the price demand elasticity for electricity, which is −0.607 (indicating that a 1% price increase results in a 0.607% decrease in demand) (Source 3), this policy could encourage consumers to shift usage away from peak hours, leading to a more balanced electricity grid and improved energy resource management.

## Future Directions
Future directions for research on electricity pricing and consumption analysis could focus on several key areas. One important approach is to study consumption percentiles to identify and potentially apply additional pricing strategies to the top X% of consumers during peak hours. This would allow for targeted interventions that better manage demand and ensure a fair distribution of energy costs. Another area for further investigation is the variability in consumption patterns between weekdays and weekends.

Additionally, integrating demographic data, such as income levels, into the analysis can provide insights into how different socio-economic groups impact overall consumption. This would enable the development of income-based pricing models that cater to varying levels of energy use across different demographics. Finally, mapping high-consumption regions can help identify areas with significant energy demand, facilitating more strategic allocation of resources and potential implementation of localized demand response programs.

## Sources
1. https://www.ofgem.gov.uk/get-smart-meter#:~:text=Smart%20meters%20are%20the%20new,when%20you%20can%20get%20one.
2. https://www.theecoexperts.co.uk/solar-panels/kwh-electricity-prices
3. https://doi.org/10.1016/j.enbuild.2023.113869